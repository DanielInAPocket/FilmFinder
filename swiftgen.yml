input_dir: ./
output_dir: ./

## Generate constants for your localized strings.
##   Be sure that SwiftGen only parses ONE locale (typically Base.lproj, or en.lproj, or whichever your development region is); otherwise it will 
##   generate the same keys multiple times. 
##   SwiftGen will parse all `.strings` files found in that folder.
strings:
  inputs:
    - FilmFinder/Resources/en.lproj/Localizable.strings
  outputs:
    - templatePath: ./SwiftGen/structured-swift5-strings.stencil
      output: FilmFinder/Core/Generated/Strings+Generated.swift
      params:
        enumName: Strings
        publicAccess: true

## Generate constants for your Assets Catalogs, including constants for images, colors, ARKit resources, etc.
##   This example also shows how to provide additional parameters to your template to customise the output.
##   - Especially the `forceProvidesNamespaces: true` param forces to create sub-namespace for each folder/group used in your Asset Catalogs, 
##     even the ones without "Provides Namespace". Without this param, SwiftGen only generates sub-namespaces for folders/groups which have 
##     the "Provides Namespace" box checked in the Inspector pane.
##   - To know which params are supported for a template, use `swiftgen template doc xcassets swift5` to open the template documentation on GitHub.
xcassets:
  - inputs:
    - FilmFinder/Resources/Colors.xcassets
    outputs:
      - templatePath: ./SwiftGen/swift5-swiftui-colors.stencil
        output: FilmFinder/Core/Generated/Colors+Generated.swift
        params:
          enumName: Colors
          forceProvidesNamespaces: true
          publicAccess: true
  - inputs: 
    - FilmFinder/Resources/Images.xcassets
    outputs:
      - templatePath: ./SwiftGen/swift5-swiftui-images.stencil
        output: FilmFinder/Core/Generated/Images+Generated.swift
        params:
          enumName: Images
          forceProvidesNamespaces: true
          publicAccess: true

## There are other parsers available for you to use depending on your needs, for example:
##  - `fonts` (if you have custom ttf/ttc font files)
##  - `coredata` (for CoreData models)
##  - `json`, `yaml` and `plist` (to parse custom JSON/YAML/Plist files and generate code from their content)
## â€¦
##
## For more info, use `swiftgen config doc` to open the full documentation on GitHub.
## https://github.com/SwiftGen/SwiftGen/tree/6.2.1/Documentation/
